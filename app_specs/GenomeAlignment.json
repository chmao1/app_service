{
    "id": "GenomeAlignment",
    "script": "App-GenomeAlignment",
    "label": "Multiple Whole Genome Alignment",
    "description": "Uses Mauve to perform multiple whole genome alignment with rearrangements.",
  "default_memory": "100G",
    "parameters": [
        {
    	    "id": "genome_ids",
	        "label": "Genome IDs to Align",
      	    "allow_multiple": true,
      	    "required": 1,
      	    "type": "list",
      	    "default": []
        },
        {
            "id": "recipe",
            "label": "Mauve recipe",
            "required": 0,
            "default": "progressiveMauve",
            "desc": "Mauve method to be used",
            "type": "enum",
            "enum": ["progressiveMauve", "mauveAligner"]
        },
        {
            "id": "seedWeight",
            "label": "Seed weight for calculating initial anchors.",
            "required": 0,
            "default": null,
            "type": "float"
        },
        {
            "id": "maxGappedAlignerLength",
            "label": "Maximum number of base pairs to attempt aligning with the gapped aligner.",
            "required": 0,
            "default": null,
            "type": "float"
        },
        {
            "id": "maxBreakpointDistanceScale",
            "label": "Set the maximum weight scaling by breakpoint distance.  Must be in [0, 1]. Defaults to 0.9.",
            "required": 0,
            "default": null,
            "type": "float"
        },
        {
            "id": "conservationDistanceScale",
            "label": "Scale conservation distances by this amount.  Must be in [0, 1].  Defaults to 1.",
            "required": 0,
            "default": null,
            "type": "float"
        },
        {
            "id": "weight",
            "label": "Minimum pairwise LCB score.",
            "required": 0,
            "default": null,
            "type": "float"
        },
        {
            "id": "minScaledPenalty",
            "label": "Minimum breakpoint penalty after scaling the penalty by expected divergence.",
            "required": 0,
            "default": null,
            "type": "float"
        },
        {
            "id": "hmmPGoHomologous",
            "label": "Probability of transitioning from the unrelated to the homologous state",
            "required": 0,
            "default": null,
            "type": "float"
        },
        {
            "id": "hmmPGoUnrelated",
            "label": "Probability of transitioning from the homologous to the unrelated state",
            "required": 0,
            "default": null,
            "type": "float"
        },
        {
            "id": "output_path",
            "label": "Output Folder",
            "required": 1,
            "default": null,
            "desc": "Path to which the output will be written. Defaults to the directory containing the input data.",
            "type": "folder"
        },
        {
            "id":"output_file",
            "label":"File Basename",
            "required": 1,
            "default":null,
            "desc":"Basename for the generated output files. Defaults to the basename of the input data.",
            "type":"wsid"
        }
    ]
}
